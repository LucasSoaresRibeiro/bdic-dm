/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ita.bdicdm.transactiongenerator.view;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.Locale;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import br.ita.bdicdm.transactiongenerator.control.TransactionFactory;
import br.ita.bdicdm.transactiongenerator.control.UserDAO;
import br.ita.bdicdm.transactiongenerator.control.UserFactory;
import br.ita.bdicdm.transactiongenerator.model.Transaction;
import br.ita.bdicdm.transactiongenerator.model.User;
import br.ita.bdicdm.transactiongenerator.util.CsvReader;
import br.ita.bdicdm.transactiongenerator.util.CsvSheet;
import br.ita.bdicdm.transactiongenerator.util.CsvSheet.CsvRow;

/**
 *
 * @author maddo_000
 */
public class MainFrame extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -8011436078552457781L;
	
	private UserDAO userDao = UserDAO.getInstance();
	/**
     * Creates new form NewJFrame
     */
    public MainFrame() {
    	super("Transaction Generator");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        transactionsPane = new javax.swing.JPanel();
        transactionTitleLabel = new javax.swing.JLabel();
        limitLabel = new javax.swing.JLabel();
        limitField = new javax.swing.JFormattedTextField();
        expensesLabel = new javax.swing.JLabel();
        lowRadioButton = new javax.swing.JRadioButton();
        mediumRadioButton = new javax.swing.JRadioButton();
        highRadioButton = new javax.swing.JRadioButton();
        generateTransactionsButton = new javax.swing.JButton();
        separator = new javax.swing.JSeparator();
        scrollPane = new javax.swing.JScrollPane();
        csvOutput = new javax.swing.JTextArea();
        exportCsvButton = new javax.swing.JButton();
        loginLabel = new javax.swing.JLabel();
        usersComboBox = new javax.swing.JComboBox();
        generateUserButton = new javax.swing.JButton();
        generateJsonButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        transactionTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        transactionTitleLabel.setText("Transações");

        limitLabel.setLabelFor(limitField);
        limitLabel.setText("Limite:");

        limitField.setColumns(10);
        limitField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        limitField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        limitField.setText("0.00");

        expensesLabel.setText("80% dos gastos são da faixa:");

        buttonGroup1.add(lowRadioButton);
        lowRadioButton.setSelected(true);
        lowRadioButton.setText("Baixa");
        lowRadioButton.setActionCommand(TransactionFactory.LOW_TRANSACTIONS_VALUES);

        buttonGroup1.add(mediumRadioButton);
        mediumRadioButton.setText("Média");
        mediumRadioButton.setActionCommand(TransactionFactory.MEDIUM_TRANSACTIONS_VALUES);

        buttonGroup1.add(highRadioButton);
        highRadioButton.setText("Alta");
        highRadioButton.setActionCommand(TransactionFactory.HIGH_TRANSACTIONS_VALUES);

        generateTransactionsButton.setText("Gerar Transações");
        generateTransactionsButton.setEnabled(false);
        generateTransactionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTransactionsButtonActionPerformed(evt);
            }
        });

        csvOutput.setEditable(false);
        csvOutput.setColumns(20);
        csvOutput.setRows(5);
        scrollPane.setViewportView(csvOutput);

        exportCsvButton.setText("Exportar CSV");
        exportCsvButton.setEnabled(false);
        exportCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsvButtonActionPerformed(evt);
            }
        });

        loginLabel.setLabelFor(usersComboBox);
        loginLabel.setText("Login:");

        usersComboBox.setMaximumRowCount(10);
        usersComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        usersComboBox.setMinimumSize(new java.awt.Dimension(150, 20));
        usersComboBox.setPreferredSize(new java.awt.Dimension(150, 20));
        usersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersComboBoxActionPerformed(evt);
            }
        });

        generateUserButton.setText("Gerar Novo Usuário");
        generateUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateUserButtonActionPerformed(evt);
            }
        });

        generateJsonButton.setText("Gerar json");
        generateJsonButton.setEnabled(false);
        generateJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJsonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout transactionsPaneLayout = new javax.swing.GroupLayout(transactionsPane);
        transactionsPane.setLayout(transactionsPaneLayout);
        transactionsPaneLayout.setHorizontalGroup(
            transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(transactionsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transactionsPaneLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(generateJsonButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportCsvButton))
                    .addGroup(transactionsPaneLayout.createSequentialGroup()
                        .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transactionTitleLabel)
                            .addGroup(transactionsPaneLayout.createSequentialGroup()
                                .addComponent(loginLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(usersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(transactionsPaneLayout.createSequentialGroup()
                        .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expensesLabel)
                            .addGroup(transactionsPaneLayout.createSequentialGroup()
                                .addComponent(lowRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mediumRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highRadioButton)))
                        .addGap(18, 18, 18)
                        .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(transactionsPaneLayout.createSequentialGroup()
                                .addComponent(limitLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(limitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(generateTransactionsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(generateUserButton)))
                .addContainerGap())
        );
        transactionsPaneLayout.setVerticalGroup(
            transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transactionsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(transactionTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(usersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expensesLabel)
                    .addComponent(limitLabel)
                    .addComponent(limitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowRadioButton)
                    .addComponent(mediumRadioButton)
                    .addComponent(highRadioButton)
                    .addComponent(generateTransactionsButton)
                    .addComponent(generateUserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(transactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportCsvButton)
                    .addComponent(generateJsonButton))
                .addContainerGap())
        );

        List<String> users = userDao.listUserCassandra();
        usersComboBox.removeAllItems();
        usersComboBox.addItem("");
        for (String user : users) {
            usersComboBox.addItem(user);
        }

        getContentPane().add(transactionsPane, java.awt.BorderLayout.PAGE_START);

        fileMenu.setText("Arquivo");

        exitMenuItem.setText("Sair");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Ajuda");

        aboutMenuItem.setText("Sobre");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersComboBoxActionPerformed
    	String user = (String) usersComboBox.getSelectedItem();
    	if (user != null && !user.equals("")) {
    		generateUserButton.setEnabled(false);
    		generateTransactionsButton.setEnabled(true);
    	} else {
    		generateUserButton.setEnabled(true);
    		generateTransactionsButton.setEnabled(false);
    	}
    	exportCsvButton.setEnabled(false);
    	generateJsonButton.setEnabled(false);
    	csvOutput.setText("");
    }//GEN-LAST:event_usersComboBoxActionPerformed

    private void generateUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateUserButtonActionPerformed
        if (JOptionPane.showConfirmDialog(this, 
        		"Gostaria de criar um novo usuário?\nNOTA: Isso não irá criar transações automaticamente.")
        		== JOptionPane.OK_OPTION) {
	    	UserFactory uf = new UserFactory();
	        User user = uf.create();
	        usersComboBox.addItem(user.getUsrLogin());
	        JOptionPane.showMessageDialog(this, "Usuário "+user.getUsrLogin()+" criado!");
        }
    }//GEN-LAST:event_generateUserButtonActionPerformed

    private void exportCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCsvButtonActionPerformed
    	//FileDialog dialog = new FileDialog(this, "Save csv file", FileDialog.SAVE);
    	String folderName = System.getProperty("user.home")+"/bdicdm/";
    	JFileChooser chooser = new JFileChooser(folderName);
    	chooser.setSelectedFile(new File (((String)usersComboBox.getSelectedItem())+".csv"));
    	
    	if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    		File file = chooser.getSelectedFile();
    		try(PrintWriter writer = new PrintWriter(file)) {
    			writer.write(csvOutput.getText());
    			writer.flush();
    		} catch (IOException e) {
    			throw new RuntimeException ("Error when writing csv file.", e);
    		}
    		JOptionPane.showMessageDialog(this, "Arquivo "+file.toString()+" salvo com sucesso!");
    	}
    }//GEN-LAST:event_exportCsvButtonActionPerformed

    private void generateTransactionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTransactionsButtonActionPerformed
    	if (validateTransactionInputs()) {
	    	String expenses = buttonGroup1.getSelection().getActionCommand();
	    	String userLogin = (String) usersComboBox.getSelectedItem();
	    	String creditLimitStr = limitField.getText();
	    	double creditLimit = Double.valueOf(creditLimitStr);
	    	
	    	User user = userDao.find(userLogin);
	        TransactionFactory tf = new TransactionFactory(user);
	        List<Transaction> transactions = tf.create(100, expenses, creditLimit);
	        populateTextArea(transactions);
	        exportCsvButton.setEnabled(true);
	        generateJsonButton.setEnabled(true);
    	}
    }//GEN-LAST:event_generateTransactionsButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente sair?") 
                == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        StringBuilder builder = new StringBuilder();
        builder.append("Transaction Generator");
        builder.append(System.lineSeparator());
        builder.append("Gera 100 transações para um usuário específico do projeto BDIC-DM e exporta para CSV.");
        builder.append(System.lineSeparator());
        builder.append("80% das transações são geradas dentro de uma faixa baixa, média ou alta do limite do usuário, dependendo da seleção feita.");
        builder.append(System.lineSeparator());
        JOptionPane.showMessageDialog(this, builder.toString());
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void generateJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJsonButtonActionPerformed
        //FileDialog dialog = new FileDialog(this, "Save csv file", FileDialog.SAVE);
    	String folderName = System.getProperty("user.home")+"/bdicdm/";
    	JFileChooser chooser = new JFileChooser(folderName);
    	chooser.setSelectedFile(new File (((String)usersComboBox.getSelectedItem())+".txt"));
    	
    	if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    		File file = chooser.getSelectedFile();
    		try(PrintWriter writer = new PrintWriter(file);
    			InputStream is = new ByteArrayInputStream(csvOutput.getText().getBytes("UTF-8"));) {
    			
    			CsvReader reader = new CsvReader(',');
    			CsvSheet csv = reader.read(is);
    			StringBuilder builder = new StringBuilder();
    			for (CsvRow csvRow : csv) {
					builder.append("{")
					       .append(System.lineSeparator());
					appendJson(builder, "token", csvRow.getColumn("usr_token"), 1);
					appendJson(builder, "creditcardNumber", csvRow.getColumn("car_id"), 1);
					appendJson(builder, "value", csvRow.getColumn("tra_value"), 1);
					appendJson(builder, "date", csvRow.getColumn("tra_date"), 1);
					appendJsonClass(builder, "geo", 1);
					appendJson(builder, "lat", csvRow.getColumn("tra_lat"), 2);
					appendJson(builder, "lon", csvRow.getColumn("tra_lon"), 2);
					builder.append("    }")
					       .append(System.lineSeparator());
					appendJson(builder, "segment", csvRow.getColumn("tra_segment"), 1);
					builder.append("}")
				           .append(System.lineSeparator())
				           .append(System.lineSeparator());
				}
    			
    			writer.write(builder.toString());
    			writer.flush();
    		} catch (IOException e) {
    			throw new RuntimeException ("Error when writing csv file.", e);
    		}
    		JOptionPane.showMessageDialog(this, "Arquivo "+file.toString()+" salvo com sucesso!");
    	}
    }//GEN-LAST:event_generateJsonButtonActionPerformed
    
    private void appendJson(StringBuilder builder, String label, String value, int level) {
    	String mark = "\"";
    	for (int i = 0; i < level; i++) {
    		builder.append("    ");	
		}
		builder.append(mark+label+mark+": ")
		       .append(mark+value+mark+",")
		       .append(System.lineSeparator());

	}
    
    private void appendJsonClass(StringBuilder builder, String label, int level) {
    	String mark = "\"";
    	for (int i = 0; i < level; i++) {
    		builder.append("    ");	
		}
		builder.append(mark+label+mark+": { ")
		       .append(System.lineSeparator());
	}

	private void populateTextArea(List<Transaction> transactions) {
		StringBuilder builder = new StringBuilder(Transaction.csvHeader());
		builder.append(System.lineSeparator());
		for (Transaction transaction : transactions) {
			builder.append(transaction.toCsv());
			builder.append(System.lineSeparator());
		}
		csvOutput.setText(builder.toString());
		
	}

	private boolean validateTransactionInputs() {
		boolean valid = true;
		String expenses = buttonGroup1.getSelection().getActionCommand();
    	String userLogin = (String) usersComboBox.getSelectedItem();
    	String creditLimitStr = limitField.getText();
    	if (expenses == null || expenses.equals("")) {
			JOptionPane.showMessageDialog(this, "Uma faixa de gastos deve ser fornecida.");
			valid = false;
		} else if (userLogin == null || userLogin.equals("")) {
			JOptionPane.showMessageDialog(this, "Um usuário deve ser selecionado.");
			valid = false;
		} else if (creditLimitStr == null || creditLimitStr.equals("")) {
    		JOptionPane.showMessageDialog(this, "Um limite de crédito deve ser fornecido.");
    		valid = false;
    	} else {
    		double creditLimit = Double.valueOf(creditLimitStr);
    		if (creditLimit <= 0.0) {
    			JOptionPane.showMessageDialog(this, "O limite de crédito deve ser maior que zero.");
    			valid = false;
    		}
    	}
    	return valid;
		
		
		
		
	}

	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
            	Locale.setDefault(Locale.US);
                MainFrame frame = new MainFrame();
                frame.setVisible(true);
                frame.setResizable(false);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea csvOutput;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel expensesLabel;
    private javax.swing.JButton exportCsvButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generateJsonButton;
    private javax.swing.JButton generateTransactionsButton;
    private javax.swing.JButton generateUserButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButton highRadioButton;
    private javax.swing.JFormattedTextField limitField;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JRadioButton lowRadioButton;
    private javax.swing.JRadioButton mediumRadioButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel transactionTitleLabel;
    private javax.swing.JPanel transactionsPane;
    private javax.swing.JComboBox usersComboBox;
    // End of variables declaration//GEN-END:variables
}
